
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types._

//Hard coded schema matching the schema of the IoT device which generates the JSON stream.
val jsonSchema = StructType(
            StructField("Username", StringType, true) ::
            StructField("Carbs", IntegerType, true) ::
            StructField("Bolus", IntegerType, true) ::
            StructField("Basal", FloatType, true) ::
            StructField("Date", LongType, true) ::
            StructField("Glucose", FloatType, true) :: Nil)

//We read JSON data from either a Kafka source or files sitting temporarily in a bucket on S3.
val inputPath = "..."
val checkpointPath = "..."
val parquetOutputPath = "..."

//To test this function as a unit, we use .option("maxFilesPerTrigger", 1) to simulate a json file stream.
val streamingInputDF = 
  spark
    .readStream
    .schema(jsonSchema)
    .option("maxFilesPerTrigger", 1)
    .json(inputPath)

//Create aggregation DataFrame
val streamingCountsDF = 
  streamingInputDF
    .groupBy($"Glucose", $"Date")
    .count()

//Confirm that the stream exists.
streamingCountsDF.isStreaming 

//Define Parquet partitions to store the results from the stream.
spark.conf.set("spark.sql.shuffle.partitions", "1")

//Write the stream to memory and create a SQL query handle.
val query =
  streamingInputDF
    .writeStream
    .format("memory")
    .queryName("patientDetails")
    //.outputMode("complete")
    .start()

//Create a separate SQL view
streamingInputDF.createOrReplaceTempView("df2")

//Display the streaming results.
display(streamingInputDF)

//Create another graphic to display a count of selected features.
%sql SELECT count(*) FROM df2 

//Create another graphic to display selected features as an updating glucose count.
%sql SELECT COUNT(Glucose), AVG(Glucose), MAX(Glucose), MIN(Glucose) FROM df2 
